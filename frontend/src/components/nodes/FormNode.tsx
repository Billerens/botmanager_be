import React, { useState } from "react";
import { Handle, Position, NodeProps } from "reactflow";
import { Card, Form, Input, Select, Button, Space, Divider } from "antd";
import { FormOutlined, PlusOutlined, DeleteOutlined } from "@ant-design/icons";
import { FlowNodeData, FormField } from "@/types/flow";

const { Option } = Select;
const { TextArea } = Input;

export const FormNode: React.FC<NodeProps<FlowNodeData>> = ({
  data,
  selected,
}) => {
  const [form] = Form.useForm();
  const [fields, setFields] = useState<FormField[]>(
    data.form?.fields || [
      {
        id: "field1",
        label: "–ò–º—è",
        type: "text",
        required: true,
        placeholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
      },
    ]
  );

  const addField = () => {
    const newField: FormField = {
      id: `field${Date.now()}`,
      label: "–ù–æ–≤–æ–µ –ø–æ–ª–µ",
      type: "text",
      required: false,
    };
    setFields([...fields, newField]);
  };

  const removeField = (fieldId: string) => {
    setFields(fields.filter((field) => field.id !== fieldId));
  };

  const updateField = (fieldId: string, updates: Partial<FormField>) => {
    setFields(
      fields.map((field) =>
        field.id === fieldId ? { ...field, ...updates } : field
      )
    );
  };

  const getFieldTypeIcon = (type: string) => {
    const icons = {
      text: "üìù",
      email: "üìß",
      phone: "üìû",
      number: "üî¢",
      select: "üìã",
      multiselect: "‚òëÔ∏è",
      date: "üìÖ",
      textarea: "üìÑ",
      checkbox: "‚òëÔ∏è",
    };
    return icons[type as keyof typeof icons] || "üìù";
  };

  return (
    <Card
      size="small"
      style={{
        width: 300,
        border: selected ? "2px solid #1890ff" : "1px solid #d9d9d9",
        borderRadius: 8,
      }}
      title={
        <Space>
          <FormOutlined />
          <span>–§–æ—Ä–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</span>
        </Space>
      }
    >
      <Handle type="target" position={Position.Top} />

      <div style={{ marginBottom: 12 }}>
        <Form.Item label="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏" style={{ marginBottom: 8 }}>
          <Input
            placeholder="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
            value={data.form?.submitText || "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
            onChange={(e) => {
              data.form = {
                ...data.form,
                submitText: e.target.value,
                fields: fields,
                successMessage: data.form?.successMessage || "–°–ø–∞—Å–∏–±–æ!",
              };
            }}
          />
        </Form.Item>
      </div>

      <Divider style={{ margin: "8px 0" }} />

      <div style={{ maxHeight: 200, overflowY: "auto" }}>
        {fields.map((field, index) => (
          <Card
            key={field.id}
            size="small"
            style={{ marginBottom: 8, background: "#fafafa" }}
            title={
              <Space>
                <span>{getFieldTypeIcon(field.type)}</span>
                <span>–ü–æ–ª–µ {index + 1}</span>
                <Button
                  type="text"
                  size="small"
                  icon={<DeleteOutlined />}
                  onClick={() => removeField(field.id)}
                />
              </Space>
            }
          >
            <Space direction="vertical" style={{ width: "100%" }} size="small">
              <Form.Item label="–ù–∞–∑–≤–∞–Ω–∏–µ" style={{ marginBottom: 4 }}>
                <Input
                  value={field.label}
                  onChange={(e) =>
                    updateField(field.id, { label: e.target.value })
                  }
                />
              </Form.Item>

              <Form.Item label="–¢–∏–ø" style={{ marginBottom: 4 }}>
                <Select
                  value={field.type}
                  onChange={(value) => updateField(field.id, { type: value })}
                  style={{ width: "100%" }}
                >
                  <Option value="text">–¢–µ–∫—Å—Ç</Option>
                  <Option value="email">Email</Option>
                  <Option value="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Option>
                  <Option value="number">–ß–∏—Å–ª–æ</Option>
                  <Option value="select">–í—ã–±–æ—Ä</Option>
                  <Option value="multiselect">–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä</Option>
                  <Option value="date">–î–∞—Ç–∞</Option>
                  <Option value="textarea">–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç</Option>
                  <Option value="checkbox">–ß–µ–∫–±–æ–∫—Å</Option>
                </Select>
              </Form.Item>

              <Form.Item label="–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä" style={{ marginBottom: 4 }}>
                <Input
                  value={field.placeholder || ""}
                  onChange={(e) =>
                    updateField(field.id, { placeholder: e.target.value })
                  }
                />
              </Form.Item>

              <Form.Item label="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ" style={{ marginBottom: 0 }}>
                <Select
                  value={field.required}
                  onChange={(value) =>
                    updateField(field.id, { required: value })
                  }
                  style={{ width: "100%" }}
                >
                  <Option value={true}>–î–∞</Option>
                  <Option value={false}>–ù–µ—Ç</Option>
                </Select>
              </Form.Item>
            </Space>
          </Card>
        ))}
      </div>

      <Button
        type="dashed"
        icon={<PlusOutlined />}
        onClick={addField}
        style={{ width: "100%", marginTop: 8 }}
      >
        –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ
      </Button>

      <Handle type="source" position={Position.Bottom} />
    </Card>
  );
};
