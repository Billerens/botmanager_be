import {
  Controller,
  Post,
  Get,
  Body,
  HttpCode,
  HttpStatus,
  Logger,
  Headers,
} from "@nestjs/common";
import { ApiTags, ApiOperation, ApiResponse } from "@nestjs/swagger";

import { AssistantBotService, TelegramUpdate } from "./assistant-bot.service";

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –±–æ—Ç–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ BotManager
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook'–∏ –æ—Ç Telegram –¥–ª—è –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞
 */
@ApiTags("Assistant Bot")
@Controller("assistant-bot")
export class AssistantBotController {
  private readonly logger = new Logger(AssistantBotController.name);

  constructor(private readonly assistantBotService: AssistantBotService) {}

  @Get("health")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞" })
  async health(): Promise<any> {
    this.logger.log("üè• Health check");
    return {
      ok: true,
      message: "Assistant Bot webhook endpoint is accessible",
      timestamp: new Date().toISOString(),
      service: "BotManager Assistant Bot",
    };
  }

  @Post("webhook")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "Webhook –¥–ª—è –±–æ—Ç–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞" })
  @ApiResponse({
    status: 200,
    description: "Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
  })
  async handleWebhook(
    @Body() update: TelegramUpdate,
    @Headers() headers: Record<string, string>
  ): Promise<{ ok: boolean }> {
    try {
      this.logger.log(`üéØ Webhook –æ—Ç Telegram!`);
      this.logger.log(`üì¶ Update: ${JSON.stringify(update)}`);

      await this.assistantBotService.handleUpdate(update);

      return { ok: true };
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error.message}`,
        error.stack
      );
      return { ok: false };
    }
  }
}
