import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { Repository } from "typeorm";
import { BotFlow } from "../../../database/entities/bot-flow.entity";
import { BotFlowNode } from "../../../database/entities/bot-flow-node.entity";
import { TelegramService } from "../../telegram/telegram.service";
import { BotsService } from "../bots.service";
import { CustomLoggerService } from "../../../common/logger.service";
import { MessagesService } from "../../messages/messages.service";
import { FlowContext } from "./base-node-handler.interface";
import { BaseNodeHandler } from "./base-node-handler";

@Injectable()
export class FormNodeHandler extends BaseNodeHandler {
  canHandle(nodeType: string): boolean {
    return nodeType === "form";
  }

  async execute(context: FlowContext): Promise<void> {
    const { currentNode, bot, session, message } = context;

    if (!currentNode?.data?.form) {
      this.logger.warn("–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    const formData = currentNode.data.form;
    const formFields = formData.fields || [];

    this.logger.log(
      `Form –Ω–æ–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–ª—è —Ñ–æ—Ä–º—ã: ${JSON.stringify(formFields.map((f) => ({ id: f.id, label: f.label, required: f.required })))}`
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!session.variables[`form_${currentNode.nodeId}_current_field`]) {
      session.variables[`form_${currentNode.nodeId}_current_field`] = "0";
      session.variables[`form_${currentNode.nodeId}_total_fields`] =
        formFields.length.toString();
      session.variables[`form_${currentNode.nodeId}_completed`] = "false";
      this.logger.log(
        `–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è —É–∑–ª–∞ ${currentNode.nodeId}`
      );
    }

    const currentFieldIndex = parseInt(
      session.variables[`form_${currentNode.nodeId}_current_field`] || "0"
    );
    const isFormCompleted =
      session.variables[`form_${currentNode.nodeId}_completed`] === "true";

    // –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    if (
      message.is_callback &&
      message.callback_query?.data === `form_submit_${currentNode.nodeId}`
    ) {
      await this.handleFormSubmit(context, currentFieldIndex, isFormCompleted);
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª–µ)
    if (message.text && !message.is_callback) {
      await this.handleFieldInput(context, currentFieldIndex);
      return;
    }

    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
    if (isFormCompleted) {
      this.logger.log(
        `–§–æ—Ä–º–∞ ${currentNode.nodeId} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É`
      );
      await this.moveToNextNode(context, currentNode.nodeId);
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    await this.showCurrentField(context, currentFieldIndex);
  }

  private async showCurrentField(
    context: FlowContext,
    currentFieldIndex: number
  ): Promise<void> {
    const { currentNode, bot, session } = context;
    const formData = currentNode.data.form;
    const formFields = formData.fields || [];

    const currentField = formFields[currentFieldIndex];

    if (!currentField) {
      this.logger.warn(`–ü–æ–ª–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${currentFieldIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return;
    }

    this.logger.log(
      `–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ: ${currentField.label} (${currentField.type})`
    );

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è
    let fieldMessage = `üìù **${currentField.label}**`;

    if (currentField.required) {
      fieldMessage += " * (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)";
    }

    if (currentField.placeholder) {
      fieldMessage += `\n\nüí° ${currentField.placeholder}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
    switch (currentField.type) {
      case "email":
        fieldMessage += "\n\nüìß –í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å";
        break;
      case "phone":
        fieldMessage += "\n\nüìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
        break;
      case "number":
        fieldMessage += "\n\nüî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ";
        break;
      case "date":
        fieldMessage += "\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì";
        break;
      case "select":
        if (currentField.options && currentField.options.length > 0) {
          fieldMessage += "\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n";
          currentField.options.forEach((option, index) => {
            fieldMessage += `${index + 1}. ${option}\n`;
          });
        }
        break;
      case "multiselect":
        if (currentField.options && currentField.options.length > 0) {
          fieldMessage +=
            "\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n";
          currentField.options.forEach((option, index) => {
            fieldMessage += `${index + 1}. ${option}\n`;
          });
        }
        break;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    const totalFields = parseInt(
      session.variables[`form_${currentNode.nodeId}_total_fields`] || "0"
    );
    const progress = `${currentFieldIndex + 1}/${totalFields}`;
    fieldMessage += `\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}`;

    await this.sendAndSaveMessage(bot, session.chatId, fieldMessage);
  }

  private async handleFieldInput(
    context: FlowContext,
    currentFieldIndex: number
  ): Promise<void> {
    const { currentNode, bot, session, message } = context;
    const formData = currentNode.data.form;
    const formFields = formData.fields || [];

    const currentField = formFields[currentFieldIndex];

    if (!currentField) {
      this.logger.warn(`–ü–æ–ª–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${currentFieldIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return;
    }

    const userInput = message.text.trim();
    this.logger.log(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª: "${userInput}" –¥–ª—è –ø–æ–ª—è ${currentField.label}`
    );

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationResult = this.validateFieldInput(currentField, userInput);

    if (!validationResult.isValid) {
      await this.sendAndSaveMessage(
        bot,
        session.chatId,
        `‚ùå ${validationResult.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏–∏
    const fieldVariableName = `form_${currentNode.nodeId}_${currentField.id}`;
    session.variables[fieldVariableName] = userInput;

    this.logger.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è ${currentField.id}: ${userInput}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è
    const nextFieldIndex = currentFieldIndex + 1;
    session.variables[`form_${currentNode.nodeId}_current_field`] =
      nextFieldIndex.toString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ñ–æ—Ä–º–∞
    const totalFields = parseInt(
      session.variables[`form_${currentNode.nodeId}_total_fields`] || "0"
    );
    if (nextFieldIndex >= totalFields) {
      session.variables[`form_${currentNode.nodeId}_completed`] = "true";
      await this.showFormCompletion(context);
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
      await this.showCurrentField(context, nextFieldIndex);
    }
  }

  private validateFieldInput(
    field: any,
    input: string
  ): { isValid: boolean; error?: string } {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (field.required && (!input || input.trim() === "")) {
      return {
        isValid: false,
        error: `–ü–æ–ª–µ "${field.label}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`,
      };
    }

    // –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    if (!field.required && (!input || input.trim() === "")) {
      return { isValid: true };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–æ–ª—è
    switch (field.type) {
      case "email":
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(input)) {
          return { isValid: false, error: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å" };
        }
        break;

      case "phone":
        const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/;
        if (!phoneRegex.test(input)) {
          return { isValid: false, error: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" };
        }
        break;

      case "number":
        const number = parseFloat(input);
        if (isNaN(number)) {
          return { isValid: false, error: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ" };
        }

        if (field.validation) {
          if (
            field.validation.min !== undefined &&
            number < field.validation.min
          ) {
            return {
              isValid: false,
              error: `–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${field.validation.min}`,
            };
          }
          if (
            field.validation.max !== undefined &&
            number > field.validation.max
          ) {
            return {
              isValid: false,
              error: `–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ ${field.validation.max}`,
            };
          }
        }
        break;

      case "date":
        const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
        if (!dateRegex.test(input)) {
          return { isValid: false, error: "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì" };
        }
        break;

      case "select":
        if (field.options && field.options.length > 0) {
          const selectedIndex = parseInt(input) - 1;
          if (
            isNaN(selectedIndex) ||
            selectedIndex < 0 ||
            selectedIndex >= field.options.length
          ) {
            return {
              isValid: false,
              error: `–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${field.options.length}`,
            };
          }
        }
        break;

      case "multiselect":
        if (field.options && field.options.length > 0) {
          const selectedIndices = input
            .split(",")
            .map((s) => parseInt(s.trim()) - 1);
          for (const index of selectedIndices) {
            if (isNaN(index) || index < 0 || index >= field.options.length) {
              return {
                isValid: false,
                error: `–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ ${field.options.length}, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏`,
              };
            }
          }
        }
        break;

      case "text":
        if (field.validation) {
          if (
            field.validation.min !== undefined &&
            input.length < field.validation.min
          ) {
            return {
              isValid: false,
              error: `–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${field.validation.min} —Å–∏–º–≤–æ–ª–æ–≤`,
            };
          }
          if (
            field.validation.max !== undefined &&
            input.length > field.validation.max
          ) {
            return {
              isValid: false,
              error: `–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ ${field.validation.max} —Å–∏–º–≤–æ–ª–æ–≤`,
            };
          }
          if (field.validation.pattern) {
            const patternRegex = new RegExp(field.validation.pattern);
            if (!patternRegex.test(input)) {
              return {
                isValid: false,
                error: "–¢–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É",
              };
            }
          }
        }
        break;
    }

    return { isValid: true };
  }

  private async showFormCompletion(context: FlowContext): Promise<void> {
    const { currentNode, bot, session } = context;
    const formData = currentNode.data.form;

    this.logger.log(`–§–æ—Ä–º–∞ ${currentNode.nodeId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    const successMessage =
      formData.successMessage || "‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!";
    await this.sendAndSaveMessage(bot, session.chatId, successMessage);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const summaryMessage = "üìã **–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n";
    let summary = summaryMessage;

    for (const field of formData.fields) {
      const fieldValue =
        session.variables[`form_${currentNode.nodeId}_${field.id}`];
      if (fieldValue) {
        summary += `**${field.label}:** ${fieldValue}\n`;
      }
    }

    await this.sendAndSaveMessage(bot, session.chatId, summary);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
    await this.moveToNextNode(context, currentNode.nodeId);
  }

  private async handleFormSubmit(
    context: FlowContext,
    currentFieldIndex: number,
    isFormCompleted: boolean
  ): Promise<void> {
    const { currentNode } = context;

    this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã ${currentNode.nodeId}`);

    if (isFormCompleted) {
      // –§–æ—Ä–º–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
      await this.moveToNextNode(context, currentNode.nodeId);
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
      await this.showCurrentField(context, currentFieldIndex);
    }
  }
}
