import {
  Controller,
  Post,
  Get,
  Body,
  HttpCode,
  HttpStatus,
  Logger,
  Headers,
} from "@nestjs/common";
import { ApiTags, ApiOperation, ApiResponse } from "@nestjs/swagger";

import {
  TelegramWebhookService,
  TelegramUpdate,
} from "./telegram-webhook.service";

@ApiTags("Telegram Webhook")
@Controller("telegram")
export class TelegramWebhookController {
  private readonly logger = new Logger(TelegramWebhookController.name);

  constructor(
    private readonly telegramWebhookService: TelegramWebhookService
  ) {}

  @Post("webhook")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook" })
  @ApiResponse({
    status: 200,
    description: "Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
  })
  async handleWebhook(
    @Body() update: TelegramUpdate,
    @Headers() headers: Record<string, string>
  ): Promise<{ ok: boolean }> {
    try {
      this.logger.log(`üéØ –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram!`);
      this.logger.log(`üì¶ Update: ${JSON.stringify(update)}`);
      this.logger.log(`üìã Headers: ${JSON.stringify(headers)}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç Telegram
      // –í production –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏
      if (process.env.NODE_ENV === "production") {
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ Telegram
        // const signature = headers["x-telegram-bot-api-secret-token"];
        // if (!this.verifyTelegramSignature(update, signature)) {
        //   throw new UnauthorizedException("Invalid Telegram signature");
        // }
      }

      await this.telegramWebhookService.handleWebhook(update);

      return { ok: true };
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error.message}`,
        error.stack
      );
      return { ok: false };
    }
  }

  @Get("health")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞" })
  async health(): Promise<any> {
    this.logger.log("üè• Health check –∑–∞–ø—Ä–æ—Å");
    return {
      ok: true,
      message: "Telegram webhook endpoint is accessible",
      timestamp: new Date().toISOString(),
      server: "BotManager API",
    };
  }

  @Post("webhook-test")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏" })
  async testWebhook(): Promise<any> {
    this.logger.log("üß™ –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ webhook");
    return {
      ok: true,
      message: "Webhook –¥–æ—Å—Ç—É–ø–µ–Ω!",
      timestamp: new Date().toISOString(),
      server: "BotManager API",
    };
  }

  @Post("set-webhook")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram webhook" })
  @ApiResponse({
    status: 200,
    description: "Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
  })
  async setWebhook(): Promise<{ ok: boolean }> {
    try {
      await this.telegramWebhookService.setWebhook();
      return { ok: true };
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${error.message}`,
        error.stack
      );
      return { ok: false };
    }
  }

  @Post("get-webhook-info")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook" })
  @ApiResponse({
    status: 200,
    description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook",
  })
  async getWebhookInfo(): Promise<any> {
    try {
      const info = await this.telegramWebhookService.getWebhookInfo();
      return { ok: true, data: info };
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: ${error.message}`,
        error.stack
      );
      return { ok: false, error: error.message };
    }
  }

  @Post("delete-webhook")
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: "–£–¥–∞–ª–µ–Ω–∏–µ webhook (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)" })
  @ApiResponse({
    status: 200,
    description: "Webhook —É–¥–∞–ª–µ–Ω",
  })
  async deleteWebhook(): Promise<{ ok: boolean }> {
    try {
      await this.telegramWebhookService.deleteWebhook();
      return { ok: true };
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ${error.message}`,
        error.stack
      );
      return { ok: false };
    }
  }
}
