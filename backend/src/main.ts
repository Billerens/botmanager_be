import { NestFactory } from "@nestjs/core";
import { ValidationPipe } from "@nestjs/common";
import { SwaggerModule, DocumentBuilder } from "@nestjs/swagger";
import { ConfigService } from "@nestjs/config";
import helmet from "helmet";
import compression from "compression";
import { AppModule } from "./app.module";

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const CRITICAL_ENV_VARS = [
  {
    name: "DATABASE_HOST",
    description: "–•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL",
    example: "localhost –∏–ª–∏ your-db-host.com",
  },
  {
    name: "DATABASE_PORT",
    description: "–ü–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL",
    example: "5432",
  },
  {
    name: "DATABASE_USERNAME",
    description: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    example: "botmanager",
  },
  {
    name: "DATABASE_PASSWORD",
    description: "–ü–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    example: "your-secure-password",
  },
  {
    name: "DATABASE_NAME",
    description: "–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    example: "botmanager_prod",
  },
  {
    name: "JWT_SECRET",
    description: "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤",
    example: "your-super-secret-jwt-key-32-chars",
  },
];

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const OPTIONAL_ENV_VARS = [
  {
    name: "REDIS_URL",
    description: "URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
    example: "redis://localhost:6379 –∏–ª–∏ redis://your-redis-host:6379",
  },
];

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkCriticalEnvVars() {
  const missingVars: typeof CRITICAL_ENV_VARS = [];

  CRITICAL_ENV_VARS.forEach((envVar) => {
    if (!process.env[envVar.name]) {
      missingVars.push(envVar);
    }
  });

  if (missingVars.length > 0) {
    console.log(
      "\n‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!\n"
    );
    console.log("üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n");

    missingVars.forEach((envVar, index) => {
      console.log(`${index + 1}. ${envVar.name}`);
      console.log(`   üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${envVar.description}`);
      console.log(`   üí° –ü—Ä–∏–º–µ—Ä: ${envVar.example}`);
      console.log("");
    });

    console.log("üîß –°–ø–æ—Å–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");
    console.log("   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –ø–∞–ø–∫–µ backend/");
    console.log("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–±–ª–∞—á–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ");
    console.log("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: export VARIABLE_NAME=value");
    console.log("");
    console.log(
      "üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://docs.nestjs.com/techniques/configuration"
    );
    console.log("");

    process.exit(1);
  } else {
    console.log("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const missingOptionalVars = OPTIONAL_ENV_VARS.filter(
      (envVar) => !process.env[envVar.name]
    );
    
    if (missingOptionalVars.length > 0) {
      console.log("\nüí° –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã):");
      missingOptionalVars.forEach((envVar) => {
        console.log(`   ‚Ä¢ ${envVar.name}: ${envVar.description}`);
      });
      console.log("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n");
    }
  }
}

async function bootstrap() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  checkCriticalEnvVars();

  const app = await NestFactory.create(AppModule);
  const configService = app.get(ConfigService);

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  app.use(helmet());
  app.use(compression());

  // CORS
  const corsOrigin = configService.get("app.corsOrigin");
  app.enableCors({
    origin: corsOrigin ?? true,
    credentials: true,
  });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
    })
  );

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
  const config = new DocumentBuilder()
    .setTitle("BotManager API")
    .setDescription("API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–∞–º–∏")
    .setVersion("1.0")
    .addBearerAuth()
    .build();

  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup("api/docs", app, document);

  // Rate limiting
  app.use((req, res, next) => {
    // –ü—Ä–æ—Å—Ç–æ–π rate limiting
    const ip = req.ip;
    const now = Date.now();
    const windowMs = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç
    const maxRequests = 100; // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 15 –º–∏–Ω—É—Ç

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ rate limiting —Å Redis
    next();
  });

  const port = configService.get("app.port") || process.env.PORT || 3000;
  await app.listen(port, "0.0.0.0");

  console.log(`üöÄ BotManager API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üìö Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${port}/api/docs`);
}

bootstrap();
